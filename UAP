import tkinter as tk
from tkinter import messagebox
import random
import os

MENU = ["burger", "hotdog", "drink"]
EMOJI = {"burger": "🍔", "hotdog": "🌭", "drink": "🥤"}
HIGH_SCORE_FILE = "cf_highscore.txt"

class CookingFever:
    def __init__(self, root):
        self.root = root
        self.root.title("🍽️ Cooking Fever - Max 4 Customers!")
        self.score = 0
        self.high_score = self.load_high_score()
        self.customers = []
        self.timer_ids = []
        self.build_ui()
        self.spawn_customers()

    def build_ui(self):
        self.score_label = tk.Label(self.root, text=f"🎯 Skor: 0 | 🏆 High Score: {self.high_score}", font=("Comic Sans MS", 12))
        self.score_label.pack(pady=10)

        self.customer_frame = tk.Frame(self.root)
        self.customer_frame.pack()

        for i in range(4):
            frame = tk.Frame(self.customer_frame, bd=2, relief="ridge", padx=5, pady=5)
            frame.grid(row=0, column=i, padx=5)

            order = [random.choice(MENU) for _ in range(random.randint(1, 2))]
            tray = []
            time_left = 30
            label = tk.Label(frame, text="", font=("Arial", 12))
            label.pack()

            tray_label = tk.Label(frame, text="🍽️ Tray: kosong", font=("Arial", 10))
            tray_label.pack()

            for item in MENU:
                btn = tk.Button(frame, text=EMOJI[item], command=lambda i=i, m=item: self.cook(i, m), width=4)
                btn.pack(side=tk.LEFT, padx=2)

            serve_btn = tk.Button(frame, text="🚀 Sajikan", command=lambda i=i: self.serve(i), bg="#ccffcc")
            serve_btn.pack(pady=3)

            self.customers.append({
                "order": order,
                "tray": tray,
                "time_left": time_left,
                "label": label,
                "tray_label": tray_label,
                "frame": frame
            })

    def load_high_score(self):
        if os.path.exists(HIGH_SCORE_FILE):
            try:
                with open(HIGH_SCORE_FILE, "r") as f:
                    return int(f.read())
            except:
                return 0
        return 0

    def save_high_score(self):
        with open(HIGH_SCORE_FILE, "w") as f:
            f.write(str(self.high_score))

    def spawn_customers(self):
        for i in range(4):
            self.update_customer_label(i)
            self.update_timer(i)

    def update_customer_label(self, i):
        c = self.customers[i]
        order_emoji = " + ".join(EMOJI[o] for o in c["order"])
        c["label"].config(text=f"🧍 Pelanggan #{i+1}\nMinta: {order_emoji}\n⏱️ {c['time_left']} detik")

    def update_timer(self, i):
        c = self.customers[i]
        if c["time_left"] > 0:
            c["time_left"] -= 1
            self.update_customer_label(i)
            self.timer_ids.append(self.root.after(1000, lambda: self.update_timer(i)))
        else:
            self.score -= 5
            self.update_score()
            messagebox.showwarning("❌ Terlambat!", f"Pelanggan #{i+1} pergi karena menunggu terlalu lama! 😢")
            self.reset_customer(i)

    def cook(self, i, item):
        c = self.customers[i]
        c["tray"].append(item)
        tray_text = "🍽️ Tray: " + " ".join(EMOJI[i] for i in c["tray"])
        c["tray_label"].config(text=tray_text)

    def serve(self, i):
        c = self.customers[i]
        if sorted(c["tray"]) == sorted(c["order"]):
            time_left = c["time_left"]
            if time_left > 20:
                bonus = 15
            elif time_left > 10:
                bonus = 10
            else:
                bonus = 5
            self.score += bonus
            messagebox.showinfo("✅ Berhasil!", f"Sajian tepat! +{bonus} poin 🎉")
        else:
            self.score -= 5
            messagebox.showwarning("❌ Salah", f"Pesanan pelanggan #{i+1} salah! 😠 -5 poin")

        self.update_score()
        self.reset_customer(i)

    def reset_customer(self, i):
        c = self.customers[i]
        c["order"] = [random.choice(MENU) for _ in range(random.randint(1, 2))]
        c["tray"] = []
        c["time_left"] = 30
        c["tray_label"].config(text="🍽️ Tray: kosong")
        self.update_customer_label(i)
        self.update_timer(i)

    def update_score(self):
        if self.score > self.high_score:
            self.high_score = self.score
            self.save_high_score()
        self.score_label.config(text=f"🎯 Skor: {self.score} | 🏆 High Score: {self.high_score}")

root = tk.Tk()
app = CookingFever(root)
root.mainloop()
