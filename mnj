import pygame
import random
import time
import sys

# Inisialisasi Pygame
pygame.init()

# Ukuran Layar yang Lebih Besar untuk Ruang yang Lega
WIDTH, HEIGHT = 1200, 750  # Diperbesar signifikan
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("MNJ's Restaurant")

# --- Font Kustom ---
# Misalnya file font kamu ada di folder 'assets/'
FONT_PATH = "c://users/USER/nanaii/GameMasakUAP/UAP/Assets/Super Peanut.ttf"

try:
    game_font = pygame.font.Font(FONT_PATH, 30)
    small_font = pygame.font.Font(FONT_PATH, 24)
except FileNotFoundError:
    print("❗ Font tidak ditemukan. Gunakan fallback Coolvetica.")
    game_font = pygame.font.SysFont("coolvetica", 48)
    small_font = pygame.font.SysFont("coolvetica", 32)


clock = pygame.time.Clock()

# Warna
BG_COLOR = (255, 248, 230)  # Latar belakang krem sangat muda
CUSTOMER_PANEL_COLOR = (255, 255, 255)  # Putih bersih untuk panel pelanggan
HEADER_COLOR = (180, 220, 255)  # Biru muda untuk header
TEXT_COLOR_DARK = (50, 50, 50)  # Teks gelap
BUTTON_PRIMARY = (150, 220, 130)  # Hijau rumput untuk tombol bahan (lebih terang)
BUTTON_SELECTED = (255, 120, 120)  # Merah muda/salmon untuk terpilih
BUTTON_HOVER = (180, 240, 160)  # Hijau lebih terang saat hover
ACCENT_ORANGE = (255, 170, 50)  # Oranye cerah untuk tombol SAJIKAN dan highlight
BORDER_COLOR = (120, 120, 120)  # Abu-abu sedang untuk border (tidak terlalu gelap)

# --- Data bahan dan pesanan ---
bahan_tersedia = ["Steak", "Nasi Goreng", "Teh Es"]
daftar_pesanan = [
    ["Steak", "Nasi Goreng"],
    ["Nasi Goreng", "Teh Es"],
    ["Steak", "Teh Es"],
    ["Steak", "Nasi Goreng", "Teh Es"]
]

# Memuat gambar bahan
food_images = {
    "Steak": pygame.image.load("C:\\Users\\USER\\nanaii\\GameMasakUAP\\UAP\\assets\\steak.png"),
    "Nasi Goreng": pygame.image.load("C:\\Users\\USER\\nanaii\\GameMasakUAP\\UAP\\assets\\nasgor.png"),
    "Teh Es": pygame.image.load("C:\\Users\\USER\\nanaii\\GameMasakUAP\\UAP\\assets\\teh_es.png")
}

# Posisi tombol bahan
tombol_bahan = {}
btn_width, btn_height = 160, 50  # Tombol lebih besar
padding_x = 30  # Jarak antar tombol
total_width_buttons = len(bahan_tersedia) * btn_width + (len(bahan_tersedia) - 1) * padding_x
start_x_buttons = (WIDTH - total_width_buttons) // 2

for i, bahan in enumerate(bahan_tersedia):
    tombol_bahan[bahan] = pygame.Rect(start_x_buttons + i * (btn_width + padding_x), HEIGHT - 100, btn_width, btn_height)

# Variabel Game
pelanggan = []
pesanan_aktif = []
pilihan_user = []
skor = 0
game_state = "loading"  # loading / main / game_over

# --- Variabel Timer ---
GAME_DURATION = 30  # Durasi game dalam detik
start_time = 0
remaining_time = GAME_DURATION

# Fungsi untuk menggambar bayangan
def draw_shadow(surface, rect, color=(0, 0, 0, 50), offset=(5, 5), radius=10):
    shadow_surface = pygame.Surface((rect.width + radius * 2, rect.height + radius * 2), pygame.SRCALPHA)
    pygame.draw.rect(shadow_surface, color, (radius, radius, rect.width, rect.height), border_radius=radius)
    surface.blit(shadow_surface, (rect.x + offset[0] - radius, rect.y + offset[1] - radius))

# Fungsi loading screen
def tampilkan_loading():
    for i in range(0, 101, 2):
        screen.fill(BG_COLOR)  # Latar belakang cerah
        
        loading_text = game_font.render(f"Time to cooking!!... {i}%", True, TEXT_COLOR_DARK)
        
        # Loading bar
        bar_x = WIDTH // 2 - 250
        bar_y = HEIGHT // 2 + 100
        bar_width = 500
        bar_height = 40
        
        pygame.draw.rect(screen, CUSTOMER_PANEL_COLOR, (bar_x, bar_y, bar_width, bar_height), border_radius=10)
        pygame.draw.rect(screen, ACCENT_ORANGE, (bar_x, bar_y, int(bar_width * i / 100), bar_height), border_radius=10)
        pygame.draw.rect(screen, BORDER_COLOR, (bar_x, bar_y, bar_width, bar_height), 3, border_radius=10)

        screen.blit(loading_text, (WIDTH // 2 - loading_text.get_width() // 2, HEIGHT // 2 + 20))

        pygame.display.flip()
        pygame.time.delay(15)

# Fungsi buat pelanggan dan pesanan
def buat_pelanggan():
    global pelanggan, pesanan_aktif
    pelanggan = []
    pesanan_aktif = []
    
    jml = random.randint(1, 3)
    for i in range(jml):
        pelanggan.append(f"Pelanggan #{i + 1}")
        pesanan_aktif.append(random.choice(daftar_pesanan))

# Fungsi menggambar UI
def gambar_game():
    screen.fill(BG_COLOR)  # Latar belakang warna solid yang ceria

    # Header Panel
    header_rect = pygame.Rect(0, 0, WIDTH, 100)
    pygame.draw.rect(screen, HEADER_COLOR, header_rect, border_bottom_left_radius=20, border_bottom_right_radius=20)
    pygame.draw.rect(screen, BORDER_COLOR, header_rect, 4, border_bottom_left_radius=20, border_bottom_right_radius=20)

    title = game_font.render("MNJ's Restaurant!", True, TEXT_COLOR_DARK)
    screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 35))
    
    skor_text = small_font.render(f"Skor: {skor}", True, TEXT_COLOR_DARK)
    screen.blit(skor_text, (WIDTH - skor_text.get_width() - 20, 35))

    timer_text = small_font.render(f"Waktu: {int(remaining_time)}s", True, TEXT_COLOR_DARK)
    screen.blit(timer_text, (40, 40))

    # Area Pelanggan dan Pesanan
    customer_panel_width = 370
    customer_panel_height = 150
    
    customer1_x = (WIDTH // 2 - customer_panel_width) // 2
    customer1_y = 150 
    
    customer2_x = WIDTH // 2 + (WIDTH // 2 - customer_panel_width) // 2
    customer2_y = 150

    customer_positions = [(customer1_x, customer1_y), (customer2_x, customer2_y)]
    
    for i, nama in enumerate(pelanggan):
        if i >= len(customer_positions):
            break

        panel_x, panel_y = customer_positions[i]
        customer_panel_rect = pygame.Rect(panel_x, panel_y, customer_panel_width, customer_panel_height)
        
        pygame.draw.rect(screen, CUSTOMER_PANEL_COLOR, customer_panel_rect, border_radius=25)
        pygame.draw.rect(screen, BORDER_COLOR, customer_panel_rect, 4, border_radius=25)

        wajahcustomer = pygame.image.load("c://users/USER/nanaii/GameMasakUAP/UAP/assets/customer.png")
        small_image = pygame.transform.scale(wajahcustomer, (100, 100))  # Sesuaikan ukuran
        screen.blit(small_image, (panel_x + 10, panel_y + 10))

        text_nama = game_font.render(nama, True, TEXT_COLOR_DARK)
        screen.blit(text_nama, (panel_x + 120, panel_y + 30))

        # Teks pesanan dengan gambar di tengah panel
        pesanan_text = "Minta: "
        text_pesanan = small_font.render(pesanan_text, True, TEXT_COLOR_DARK)
        screen.blit(text_pesanan, (panel_x + 120, panel_y + 100))

        # Gambar pesanan
        for idx, pesanan in enumerate(pesanan_aktif[i]):
            food_image = food_images[pesanan]
            small_image = pygame.transform.scale(food_image, (90, 70))  # Sesuaikan ukuran
            screen.blit(small_image, (panel_x + 180 + idx * 60, panel_y + 85))

    # Area Pilihan User
    serving_area_width = WIDTH - 500
    serving_area_height = 60
    serving_plate_rect = pygame.Rect(250, HEIGHT - 180, serving_area_width, serving_area_height)
    
    pygame.draw.ellipse(screen, CUSTOMER_PANEL_COLOR, serving_plate_rect)
    pygame.draw.ellipse(screen, BORDER_COLOR, serving_plate_rect, 4)

    # pilihan_title = small_font.render("Piringku: ", True, TEXT_COLOR_DARK)
    # screen.blit(pilihan_title, (serving_plate_rect.x + 30, serving_plate_rect.y + 20))

    # Gambar pilihan user
    for idx, pilihan in enumerate(pilihan_user):
        food_image = food_images[pilihan]
        small_image = pygame.transform.scale(food_image, (360, 200))  # Ukuran piringan
        screen.blit(small_image, (serving_plate_rect.x - 20 + idx * 195, serving_plate_rect.y - 100))

    # Tombol bahan
    mouse_pos = pygame.mouse.get_pos()
    for bahan, rect in tombol_bahan.items():
        button_color = BUTTON_PRIMARY
        if rect.collidepoint(mouse_pos):
            button_color = BUTTON_HOVER
        if bahan in pilihan_user:
            button_color = BUTTON_SELECTED
        
        pygame.draw.rect(screen, button_color, rect, border_radius=15)
        pygame.draw.rect(screen, BORDER_COLOR, rect, 4, border_radius=15)

        # Gambar bahan
        food_image = food_images[bahan]
        screen.blit(food_image, (rect.x + (rect.width - food_image.get_width()) // 2, rect.y + 15))
        name_render = small_font.render(bahan, True, TEXT_COLOR_DARK)
        screen.blit(name_render, (rect.x + (rect.width - name_render.get_width()) // 2, rect.y + rect.height - 40))

    # Tombol SAJIKAN
    sajikan_btn_rect = pygame.Rect(WIDTH // 2 - 120, HEIGHT - 400, 240, 70)
    
    button_color = ACCENT_ORANGE
    if sajikan_btn_rect.collidepoint(mouse_pos):
        button_color = (255, 200, 80)
    
    pygame.draw.rect(screen, button_color, sajikan_btn_rect, border_radius=30)
    pygame.draw.rect(screen, BORDER_COLOR, sajikan_btn_rect, 5, border_radius=30)

    sajikan_text = game_font.render("SAJIKAN!", True, TEXT_COLOR_DARK)
    screen.blit(sajikan_text, (sajikan_btn_rect.x + (sajikan_btn_rect.width - sajikan_text.get_width()) // 2, sajikan_btn_rect.y + (sajikan_btn_rect.height - sajikan_text.get_height()) // 2))

    return sajikan_btn_rect

# Fungsi evaluasi pesanan
def periksa_pesanan():
    global skor, pilihan_user
    cocok = False
    for idx, pesanan in enumerate(pesanan_aktif):
        if sorted(pilihan_user) == sorted(pesanan):
            skor += 10
            cocok = True
            pesanan_aktif.pop(idx)
            pelanggan.pop(idx)
            break
    if not cocok:
        skor -= 5
    pilihan_user = []
    if not pelanggan:
        buat_pelanggan()

# Fungsi Game Over
def tampilkan_game_over():
    screen.fill(BG_COLOR)
    
    panel_width = 700
    panel_height = 400
    panel_x = (WIDTH - panel_width) // 2
    panel_y = (HEIGHT - panel_height) // 2
    
    pygame.draw.rect(screen, CUSTOMER_PANEL_COLOR, (panel_x, panel_y, panel_width, panel_height), border_radius=40)
    pygame.draw.rect(screen, BORDER_COLOR, (panel_x, panel_y, panel_width, panel_height), 6, border_radius=40)

    game_over_text = game_font.render("TIME IS OVER!!", True, ACCENT_ORANGE)
    skor_akhir_text = small_font.render(f"FINAL SCORE : {skor} Poin!", True, TEXT_COLOR_DARK)
    restart_text = small_font.render("Tekan [R] play again!", True, TEXT_COLOR_DARK)
    quit_text = small_font.render("Tekan [Q] tutup", True, TEXT_COLOR_DARK)

    screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, panel_y + 50))
    screen.blit(skor_akhir_text, (WIDTH // 2 - skor_akhir_text.get_width() // 2, panel_y + 150))
    screen.blit(restart_text, (WIDTH // 2 - restart_text.get_width() // 2, panel_y + 230))
    screen.blit(quit_text, (WIDTH // 2 - quit_text.get_width() // 2, panel_y + 280))
    
    pygame.display.flip()

# ========== MAIN LOOP ==========
tampilkan_loading()
buat_pelanggan()
game_state = "main"
start_time = time.time()

running = True
while running:
    if game_state == "main":
        elapsed_time = time.time() - start_time
        remaining_time = GAME_DURATION - elapsed_time
        if remaining_time <= 0:
            game_state = "game_over"
            remaining_time = 0

    clock.tick(30)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if game_state == "main":
            if event.type == pygame.MOUSEBUTTONDOWN:
                pos = event.pos
                for bahan, rect in tombol_bahan.items():
                    if rect.collidepoint(pos):
                        if bahan not in pilihan_user:
                            pilihan_user.append(bahan)
                
                sajikan_btn_current_rect = pygame.Rect(WIDTH // 2 - 120, HEIGHT - 400, 240, 70)
                if sajikan_btn_current_rect.collidepoint(pos):
                    periksa_pesanan()

        elif game_state == "game_over":
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    game_state = "main"
                    skor = 0
                    pilihan_user = []
                    buat_pelanggan()
                    start_time = time.time()
                    remaining_time = GAME_DURATION
                elif event.key == pygame.K_q:
                    running = False

    if game_state == "main":
        gambar_game()
    elif game_state == "game_over":
        tampilkan_game_over()

    pygame.display.flip()

pygame.quit()
sys.exit()
